require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TripsController do
  include Devise::TestHelpers

  context "when not logged in" do

    describe "GET index" do
      it "assigns all trips as @trips" do
        trip = FactoryGirl.create(:trip)
        get :index
        # assigns --> peeks at instance var @trips
        assigns(:trips).should == [trip]
      end
    end

    describe "GET show" do
      it "assigns the requested trip as @trip" do
        trip = FactoryGirl.create(:trip)
        get :show, :id => trip.id.to_s
        assigns(:trip).should eq(trip)
      end
    end

    describe "all other actions" do
      it 'should redirect to login page' do
        trip = FactoryGirl.create(:trip)
        delete :destroy, :id => trip.id.to_s
        response.should redirect_to(new_user_session_url)
      end
    end
  end

  context "when logged in" do

    before do
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    describe "GET new" do
      it "assigns a new trip as @trip" do
        get :new
        assigns(:trip).should be_a_new(Trip)
      end
    end

    describe "GET edit" do
      it "assigns the requested trip as @trip" do
        trip = FactoryGirl.create(:trip)
        get :edit, :id => trip.id.to_s
        assigns(:trip).should eq(trip)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Trip" do
          expect {
            post :create, :trip => {name: "SoCal"}
          }.to change(Trip, :count).by(1)
        end

        it "assigns a newly created trip as @trip" do
          post :create, :trip => {name: "SoCal"}
          assigns(:trip).should be_a(Trip)
        end

        it "redirects to the created trip" do
          post :create, :trip => {name: "SoCal"}
          trip = assigns(:trip)
          response.should redirect_to(trip)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved trip as @trip" do
          # Trigger the behavior that occurs when invalid params are submitted
          post :create, :trip => {}
          assigns(:trip).should be_a_new(Trip)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          post :create, :trip => {}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      before do
        @trip = FactoryGirl.create(:trip, user: @user)
      end

      describe "with valid params" do
        it "updates the requested trip" do
          # Assuming there are no other trips in the database, this
          # specifies that the Trip created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          put :update, :id => @trip.id, :trip => {name: 'NoCal'}
          @trip.reload.name.should == 'NoCal'
        end

        it "assigns the requested trip as @trip" do
          put :update, :id => @trip.id, :trip => {name: 'Nocal'}
          assigns(:trip).should eq(@trip)
        end

        it "redirects to the trip" do
          put :update, :id => @trip.id, :trip => {name: 'nocal'}
          response.should redirect_to(@trip)
        end
      end

      describe "with invalid params" do
        it "assigns the trip as @trip" do
          put :update, :id => @trip.id.to_s, :trip => {name: ''}
          assigns(:trip).should eq(@trip)
        end

        it "re-renders the 'edit' template" do
          put :update, :id => @trip.id.to_s, :trip => {name: ''}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      before do
        @trip = FactoryGirl.create(:trip,user: @user)
      end
      it "destroys the requested trip" do
        expect {
          delete :destroy, :id => @trip.id.to_s
        }.to change(Trip, :count).by(-1)
      end

      it "redirects to the trips list" do
        delete :destroy, :id => @trip.id.to_s
        response.should redirect_to(trips_url)
      end
    end

  end
end
